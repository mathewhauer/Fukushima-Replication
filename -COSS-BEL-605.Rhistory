TRUE ~ as.character(NAM)
),
Impacted = ifelse(NAM %in% c("FUKUSHIMA", "MIYAGI", "IWATE"), "gray70", "gray93"))
# Coordinates come from https://earthobservatory.nasa.gov/images/49621/earthquake-and-tsunami-near-sendai-japan
eqloc<- SpatialPoints(data.frame(x = 142.4, y = 38.3))
japan <- append_data(japan, fmig, key.shp= "NAM", key.data ="NAM")
japan2 <- japan
japan2$NAM <- str_title_case(str_lower_case(japan2$NAM))
tm_shape(japan2, bbox= japan_bb) +
tm_fill(col = "Impacted") +
tm_borders(col = "white") +
tm_text("NAM", size =0.3) +
tm_shape(eqloc) +
tm_symbols(col = "red", size = 0.5) +
# tm_credits("Fukushima", position = c(0.61, 0.47)) +
# tm_shape(japan[japan$NAM == "FUKUSHIMA",]) +
#   tm_text("NAM", just= "left", xmod=1.4) +
tm_compass() +
tm_scale_bar()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
read_chunk('../R/SCRIPTS/000-Libraries.R')
read_chunk('../R/SCRIPTS/001-LoadCleanData_manuscript.R')
read_chunk('../R/SCRIPTS/002-HellingerDistance.R')
read_chunk('../R/SCRIPTS/003-PostDisasterSystem.R')
read_chunk('../R/SCRIPTS/101-Figure_JapanMap.R')
read_chunk('../R/SCRIPTS/104-Figure_JapanMap_base.R')
read_chunk('../R/SCRIPTS/106-Figure_Hellresults.R')
rm(list = ls()) # Remove Previous Workspace
gc(reset = TRUE) # Garbage Collection
# R Workspace Options
options(scipen = 12) # Scientific Notation
options(digits = 6) # Specify Digits
options(java.parameters = "-Xmx1000m") # Increase Java Heap Size
#Functions, Libraries, & Parallel Computing
## Functions
# Specify Number of Digits (Forward)
numb_digits_F <- function(x,y){
numb_digits_F <- do.call("paste0", list(paste0(rep(0, y - nchar(x)), collapse = ""), x))
numb_digits_F <- ifelse(nchar(x) < y, numb_digits_F, x)
}
# Remove Double Space
numb_spaces <- function(x) gsub("[[:space:]]{2,}", " ", x)
# Install and load pacman for easier package loading and installation
if (!require("pacman", character.only = TRUE)){
install.packages("pacman", dep = TRUE)
if (!require("pacman", character.only = TRUE))
stop("Package not found")
}
# Libraries
pkgs <- c(
"tidyverse",     # Tidyverse
"data.table",    # Data Management/Manipulation
"doParallel",    # Parallel Computing
"foreach",       # Parallel Computing
"openxlsx",      # Microsoft Excel Files
"stringi",       #Character/String Editor
"stringr",       # Character/String Editor
"reshape2",      # Data Management/Manipulation
"scales",        # Number formatting
"cowplot",       # Plot Grids
"tmap",          # Cartography
"tmaptools",     # Cartographic tools
"sp",            # Spatial Objects
"grid",          # Plot Grids
"kableExtra",    # Pretty Tables
"pdftools",      # Load pdfs
"R.utils",       # Utilities
"IDPmisc",        # Quality na.rm
"ggrepel",
"raster",
"gridExtra",
"magick",
"pdftools",
"readxl",
"zoo",
"bsts",
"CausalImpact",
"kableExtra",
"lettercase",
"philentropy",
"ggridges",
"janitor",
"gghighlight"
)
# Install missing packages
# Will only run if at least one package is missing
if(!sum(!p_isinstalled(pkgs))==0){
p_install(
package = pkgs[!p_isinstalled(pkgs)],
character.only = TRUE
)
}
# load the packages
p_load(pkgs, character.only = TRUE)
rm(pkgs)
##Parallel Computing
# Establish Parallel Computing Cluster
clusters <- makeCluster(detectCores() - 1) # Create Cluster with Specified Number of Cores
registerDoParallel(clusters) # Register Cluster
# Parallel Computing Details
getDoParWorkers() # Determine Number of Utilized Clusters
getDoParName() #  Name of the Currently Registered Parallel Computing Backend
getDoParVersion() #  Version of the Currently Registered Parallel Computing Backend
# Importing the Japanese shapefile and setting the bounding box to exclude many of the outlying islands
japan <- shapefile("../R/DATA-RAW/japanprefecture/japan_prefecture_boundary")
japan_bb <- bb(japan, xlim=c(.15, .85), ylim=c(0.35, 1), relative = TRUE)
# Importing the migration data
a_2016 <- read_csv("../R/DATA-RAW/migration/migod_2016.csv") %>%
gather(origin, migrants, 2:74) %>% # Going from Wide to Tall
mutate(year = 2016) %>% # Setting the year to 2016
dplyr::select(X1, origin, migrants, year) # Selecting the Destination, Origin, # of Migrants, and the Year.
a_2015 <- read_csv("../R/DATA-RAW/migration/migod_2015.csv") %>%
gather(origin, migrants, 2:74) %>%
mutate(year = 2015) %>%
dplyr::select(X1, origin, migrants, year)
a_2014 <- read_csv("../R/DATA-RAW/migration/migod_2014.csv") %>%
gather(origin, migrants, 2:74) %>%
mutate(year = 2014) %>%
dplyr::select(X1, origin, migrants, year)
a_2013 <- read_csv("../R/DATA-RAW/migration/migod_2013.csv") %>%
gather(origin, migrants, 2:74) %>%
mutate(year = 2013) %>%
dplyr::select(X1, origin, migrants, year)
a_2012 <- read_csv("../R/DATA-RAW/migration/migod_2012.csv") %>%
gather(origin, migrants, 2:74) %>%
mutate(year = 2012) %>%
dplyr::select(X1, origin, migrants, year)
a_2011 <- read_csv("../R/DATA-RAW/migration/migod_2011.csv") %>%
gather(origin, migrants, 2:73) %>%
mutate(year = 2011) %>%
dplyr::select(X1, origin, migrants, year)
a_2010 <- read_csv("../R/DATA-RAW/migration/migod_2010.csv") %>%
gather(origin, migrants, 2:73) %>%
mutate(year = 2010) %>%
dplyr::select(X1, origin, migrants, year)
a_2009 <- read_csv("../R/DATA-RAW/migration/migod_2009.csv") %>%
gather(origin, migrants, 2:72) %>%
mutate(year = 2009) %>%
dplyr::select(X1, origin, migrants, year)
a_2008 <- read_csv("../R/DATA-RAW/migration/migod_2008.csv") %>%
gather(origin, migrants, 2:70) %>%
mutate(year = 2008) %>%
dplyr::select(X1, origin, migrants, year)
a_2007 <- read_csv("../R/DATA-RAW/migration/migod_2007.csv") %>%
gather(origin, migrants, 2:70) %>%
mutate(year = 2007) %>%
dplyr::select(X1, origin, migrants, year)
a_2006 <- read.xlsx("../R/DATA-RAW/migration/Copy of a012-2.xlsx", sheet =3) %>%
gather(origin, migrants, 3:49) %>%
mutate(year = 2006) %>%
dplyr::select(X1, origin, migrants, year)
a_2005 <- read.xlsx("../R/DATA-RAW/migration/a012_2005.xlsx", sheet =3) %>%
gather(origin, migrants, 3:49) %>%
mutate(year = 2005) %>%
dplyr::select(X1, origin, migrants, year)
a_2004 <- read.xlsx("../R/DATA-RAW/migration/a013_2004.xlsx", sheet =3) %>%
gather(origin, migrants, 2:49) %>%
mutate(year = 2004) %>%
dplyr::select(X1, origin, migrants, year)
# Joining all of the migration data together.
migdata <- full_join(a_2016, a_2015) %>%
full_join(., a_2014) %>%
full_join(., a_2013) %>%
full_join(., a_2012) %>%
full_join(., a_2011) %>%
full_join(., a_2010) %>%
full_join(., a_2009) %>%
full_join(., a_2008) %>%
full_join(., a_2007) %>%
full_join(., a_2006) %>%
full_join(., a_2005) %>%
full_join(., a_2004) %>%
filter(!grepl("Total", origin)) %>% #Excluding the Totals
filter(!grepl("Total", X1))
# Fixing some of the oddly worded variables.
migdata2 <- migdata %>%
mutate_at(funs(as.character(.)), .vars="migrants") %>%
mutate_at(funs(gsub(",", "", .)), .vars = "migrants") %>%
mutate_at(funs(gsub("-ken", "", .)), .vars = "X1") %>%
mutate_at(funs(gsub("-ken", "", .)), .vars = "origin") %>%
mutate_at(funs(as.numeric(.)), .vars = "migrants") %>%
mutate(year = paste0("X",as.character(year))) %>%
#spread(year, migrants) %>%
filter(!grepl("Total", origin)) %>%
filter(!grepl("Total", X1)) %>%
filter(!grepl("-shi", origin )) %>%
filter(!grepl("-shi", X1 )) %>%
filter(!grepl("area", origin )) %>%
filter(!grepl("Area", origin )) %>%
filter(!grepl("area", X1 )) %>%
filter(!grepl("Area", X1 )) %>%
filter(!grepl("(Thousands)", origin)) %>%
filter(!grepl("area", X1)) %>%
filter(!grepl("(Thousands)", X1)) %>%
filter(!grepl("Others", X1)) %>%
filter(!grepl("Others", origin)) %>%
spread(year, migrants)
# Going from Wide to Tall.
migdata3 <- migdata2 %>%
gather(year, estimate, X2004:X2016) %>%
mutate(Year = as.Date(as.yearmon(as.numeric(substr(year, 2,5)))),
OD = paste0(origin, X1))
# Getting the total number of migrants and the probability of migrating to each prefecture.
migdata4 <- migdata3 %>%
group_by(origin, year) %>%
dplyr::summarize(dest_tot = sum(estimate, na.rm=TRUE)) %>%
left_join(., migdata3) %>%
mutate(dest_per = estimate/dest_tot)
# Getting the origin number of migrants and the probability of migrating from each prefecture.
migdata5 <- migdata3 %>%
group_by(X1, year) %>%
dplyr::summarize(origin_tot = sum(estimate, na.rm=TRUE)) %>%
left_join(., migdata3) %>%
mutate(origin_per = estimate/origin_tot)
# Joining the Origin and Destination numbers together.
migdata5 <- left_join(migdata5, migdata4, by = c("X1", "year", "origin", "Year", "OD")) %>%
dplyr::select(-estimate.y, estimate = estimate.x)
# Evauee Data
# Evacuee data taken from Takahsi Oda's Snapshot of Fukushima Evacuees.
# http://tohokugeo.jp/articles/e-contents24.pdf
evacuees <- tribble(
~X1, ~origin, ~Evacuees,
"Hokkaido", "Fukushima",	1335,
"Aomori","Fukushima",	579,
"Iwate","Fukushima",	401,
"Miyagi","Fukushima",	1091,
"Akita","Fukushima",	865,
"Yamagata","Fukushima",	5518,
"Ibaraki","Fukushima",	1905,
"Tochigi","Fukushima",	2624,
"Gumma","Fukushima",	2510,
"Saitama","Fukushima",	2666,
"Chiba","Fukushima",	3024,
"Tokyo-to","Fukushima",	5102,
"Kanagawa","Fukushima",	1146,
"Niigata","Fukushima",	7219,
"Toyama","Fukushima",	402,
"Ishikawa","Fukushima",	424,
"Fukui","Fukushima",	414,
"Yamanashi","Fukushima",	723,
"Nagano","Fukushima",	929,
"Gifu","Fukushima",	261,
"Shizuoka","Fukushima",	1007,
"Aichi","Fukushima",	814,
"Mie","Fukushima",	145,
"Shiga","Fukushima",	254,
"Kyoto-fu","Fukushima",	477,
"Osaka-fu","Fukushima",	564,
"Hyogo","Fukushima",	498,
"Nara","Fukushima",	78,
"Wakayama","Fukushima",	50,
"Tottori","Fukushima",	70,
"Shimane","Fukushima",	143,
"Okayama","Fukushima",	132,
"Hiroshima","Fukushima",	235,
"Yamaguchi","Fukushima",	94,
"Tokushima","Fukushima",	58,
"Kagawa","Fukushima",	49,
"Ehime","Fukushima",	149,
"Kochi","Fukushima",	56,
"Fukuoka","Fukushima",	299,
"Saga","Fukushima",	60,
"Nagasaki","Fukushima",	111,
"Kumamoto","Fukushima",	72,
"Oita","Fukushima",	181,
"Miyazaki","Fukushima",	81,
"Kagoshima","Fukushima",	128,
"Okinawa","Fukushima",	299
)
# Calculating the evacuees probability.
evacueeper <- evacuees %>%
mutate(evac_per = Evacuees/ sum(Evacuees))
# Setting the base year as 2010.
basemig <- migdata5 %>%
filter(year == "X2010") %>%
dplyr::select(origin, X1, OD, num2010 = estimate, originper2010 = origin_per, destper2010 = dest_per)
# Setting a second year as 2011.
mig2011 <- migdata5 %>%
filter(year == "X2011") %>%
dplyr::select(origin, X1, OD, num2011 = estimate, destper2011 = dest_per, originper2011 = origin_per)
mig2012 <- migdata5 %>%
filter(year == "X2012") %>%
dplyr::select(origin, X1, OD, num2012 = estimate, destper2012 = dest_per, originper2012 = origin_per)
mig2013 <- migdata5 %>%
filter(year == "X2013") %>%
dplyr::select(origin, X1, OD, num2013 = estimate, destper2013 = dest_per, originper2013 = origin_per)
# Joing the pre- with the per- and post-disaster periods
regdat <- left_join(basemig, mig2011) %>%
left_join(., mig2012) %>%
left_join(., mig2013) %>%
na.omit
# Subsetting just the Fukushima data and joining with the Evacuees.
Fukushimadat <- regdat %>%
filter(origin == "Fukushima") %>%
left_join(., evacueeper) %>%
na.omit
# Making a new database that is basically throw away.
zzz <- migdata5 %>%
dplyr::select(origin, X1, OD, year, dest_per)
# Creating a function to filter the throwaway database based on the year
filtdistance <- function(YEAR){
zzz %>%
filter(year == YEAR) %>%
group_by(origin) %>%
na.omit %>%
dplyr::select(origin, X1, year, dest_per) %>%
spread(X1, dest_per)
}
# Creating an individual database for each year.
x2004 <- filtdistance("X2004")
x2005 <- filtdistance("X2005")
x2006 <- filtdistance("X2006")
x2007 <- filtdistance("X2007")
x2008 <- filtdistance("X2008")
x2009 <- filtdistance("X2009")
x2010 <- filtdistance("X2010")
x2011 <- filtdistance("X2011")
x2012 <- filtdistance("X2012")
x2013 <- filtdistance("X2013")
x2014 <- filtdistance("X2014")
x2015 <- filtdistance("X2015")
x2016 <- filtdistance("X2016")
# Getting the unique number of years
nums <- unique(zzz$year)
# Setting an output to hold the results of the following for loop.
out<- NULL
# The following for loop goes through each year from 1 through the number of years minus 1.
# It creates a new database and calculates the Hellinger distance.
for(i in 1:(length(nums)-1)){
KLdata <- rbind(get(paste0("x",as.numeric(substr(unique(zzz$year)[i],2,6)))),
get(paste0("x",as.numeric(substr(unique(zzz$year)[i],2,6))+1))
)
for(id in unique(KLdata$origin)){
x <- as.matrix(remove_empty(filter(KLdata, origin == id)[,-1:-2], which = "cols"))
out2 <- NULL
out2$id[id] <- id
out2$YEAR[id] <- paste0(unique(KLdata$year)[1], unique(KLdata$year)[2])
out2$distance[id]<- philentropy::distance(x, method = "hellinger")
out2 <- as.data.frame(out2)
out <- rbind(out, out2)
}}
# Gathering the for loop results as a data frame.
a <- as.data.frame(out) %>%
mutate(id = as.character(id))
# Preping the data for the Evacuee's Hellinger distance. The comparison is with the Fukushima pre-disaster migration.
fukmiga <- Fukushimadat %>%
dplyr::select(origin, X1, destper2010) %>%
spread(X1, destper2010)
# Preping the data the for the Evacuees.
fukevaca <- Fukushimadat %>%
dplyr::select(origin, X1, evac_per) %>%
spread(X1, evac_per)
# Putting the Fukushima Migration and Fukushima Evacuation data together.
fuku <- as.matrix(rbind(fukmiga, fukevaca) %>%
dplyr::select(-origin))
f <- NULL
f$id <- "Evacuees"
f$distance <- philentropy::distance(fuku, method = "hellinger")
f$YEAR <- "X2010X2011"
f <- as.data.frame(f)
# Joining All of the Migration distances with the Evacuee distances.
# Calculating the log distance for the log-normal analysis.
KLdat<- rbind(a,f) %>%
mutate(dstfrommean = log(distance) - mean(log(distance)),
sdfrommean = dstfrommean/ sd(log(distance)))
# Filtering out the Evacuees to create some summary statistics
sumstats <- filter(KLdat, !id == "Evacuees")
# Calculating the significance where the SD is above 1.96.
sigstats <- filter(KLdat, sdfrommean >= 1.96) %>%
dplyr::select(Prefecture = id, Year = YEAR, Distance = distance, `z-score` = sdfrommean) %>%
mutate(Year = paste0(substr(as.character(Year),2,5),", ",substr(as.character(Year),7,10)),
Year = if_else(Prefecture == "Evacuees", "2010, Evacuees", Year),
`p-val` = 2*pnorm(-abs(`z-score`))) %>%
arrange(-`z-score`) %>%
dplyr::select(Prefecture, `P, Q` = Year, `H(P, Q)` = Distance, `z-score`, `p-val`)
# This script compares 2011, 2012, and 2013 with 2010 out-migration.
nums <- c("X2011", "X2012", "X2013")
out<- NULL
for(i in 1:length(nums)){
KLdata <- rbind(get("x2010"),
get(paste0("x",as.numeric(substr(unique(nums)[i],2,6))))
)
for(id in unique(KLdata$origin)){
x <- as.matrix(remove_empty(filter(KLdata, origin == id)[,-1:-2], which = "cols"))
out2 <- NULL
out2$id[id] <- id
out2$YEAR[id] <- paste0(unique(KLdata$year)[1], unique(KLdata$year)[2])
out2$distance[id]<- philentropy::distance(x, method = "hellinger")
out2 <- as.data.frame(out2)
out <- rbind(out, out2)
}
}
# The final post-disaster migration system comparisons to the pre-existing system.
b <- as.data.frame(out) %>%
mutate(id = as.character(id),
Year = paste0(substr(as.character(YEAR),2,5),", ",substr(as.character(YEAR),7,10))) %>%
filter(id %in% c("Fukushima", "Iwate", "Miyagi")) %>%
dplyr::select(Prefecture = id, `P, Q` = Year, `H(P, Q)` = distance) %>%
arrange(Prefecture, `P, Q`)
fukushima <- subset(migdata5, origin == "Fukushima") %>%
filter(., year %in% c("X2010", "X2011")) %>%
#mutate(NAM = "FUKUSHIMA") %>%
separate(X1, "NAM", sep = "-") %>%
ungroup()
f2010 <- fukushima %>%
filter(year == "X2010") %>%
dplyr::select(NAM, m2010= dest_per)
f2011 <- fukushima %>%
filter(year == "X2011") %>%
dplyr::select(NAM, m2011= dest_per)
fmig <- left_join(f2010, f2011, by = "NAM") %>%
mutate(NAM = str_upper(NAM),
NAM = case_when(
NAM == "GIFU" ~ "GIHU",
NAM == "GUMMA" ~ "GUNMA",
TRUE ~ as.character(NAM)
),
Impacted = ifelse(NAM %in% c("FUKUSHIMA", "MIYAGI", "IWATE"), "gray70", "gray93"))
# Coordinates come from https://earthobservatory.nasa.gov/images/49621/earthquake-and-tsunami-near-sendai-japan
eqloc<- SpatialPoints(data.frame(x = 142.4, y = 38.3))
japan <- append_data(japan, fmig, key.shp= "NAM", key.data ="NAM")
japan2 <- japan
japan2$NAM <- str_title_case(str_lower_case(japan2$NAM))
tm_shape(japan2, bbox= japan_bb) +
tm_fill(col = "Impacted") +
tm_borders(col = "white") +
tm_text("NAM", size =0.3) +
tm_shape(eqloc) +
tm_symbols(col = "red", size = 0.5) +
# tm_credits("Fukushima", position = c(0.61, 0.47)) +
# tm_shape(japan[japan$NAM == "FUKUSHIMA",]) +
#   tm_text("NAM", just= "left", xmod=1.4) +
tm_compass() +
tm_scale_bar()
fukushima <- subset(migdata5, origin == "Fukushima") %>%
filter(., year %in% c("X2010", "X2011")) %>%
#mutate(NAM = "FUKUSHIMA") %>%
separate(X1, "NAM", sep = "-") %>%
ungroup()
f2010 <- fukushima %>%
filter(year == "X2010") %>%
dplyr::select(NAM, m2010= dest_per)
f2011 <- fukushima %>%
filter(year == "X2011") %>%
dplyr::select(NAM, m2011= dest_per)
fmig <- left_join(f2010, f2011, by = "NAM") %>%
mutate(NAM = str_upper(NAM),
NAM = case_when(
NAM == "GIFU" ~ "GIHU",
NAM == "GUMMA" ~ "GUNMA",
TRUE ~ as.character(NAM)
))
# Coordinates come from https://earthobservatory.nasa.gov/images/49621/earthquake-and-tsunami-near-sendai-japan
eqloc<- SpatialPoints(data.frame(x = 142.4, y = 38.3))
japan <- append_data(japan, fmig, key.shp= "NAM", key.data ="NAM")
tm_shape(japan, bbox = japan_bb) +
tm_fill(c("m2010", "m2011"),
title = c("% out-migrants 2010", "% out-migrants 2011"),
textNA = "Fukushima",
breaks = c(0, 0.01, 0.030, 0.04, 0.060, 0.10, 0.184)) +
tm_layout(legend.format=list(fun=function(x) paste0(x*100, "%"))) +
tm_borders() +
tm_shape(eqloc) +
tm_symbols(col = "red", size = 0.5) +
tm_credits("Fukushima", position = c(0.61, 0.47)) +
tm_compass() +
tm_scale_bar()
# Making the data for the Figure.
ridgedat <- KLdat %>%
mutate(Prefecture = case_when(
id == "Fukushima" ~ "Fukushima",
id == "Iwate" ~ "Iwate",
id == "Miyagi" ~ "Miyagi",
id == "Evacuees" ~ "Evacuees",
TRUE ~ "All Prefectures"))
ggplot(data=ridgedat, aes(x= distance)) +
geom_density() +
geom_rug(color = "gray80") +
geom_rug(data = filter(ridgedat, Prefecture %in% c("Fukushima", "Iwate", "Miyagi", "Evacuees")),
aes(color = Prefecture)) +
scale_color_brewer(palette="Set1") +
scale_x_continuous(expand = c(0.0, 0),
# breaks = c(0.13, 0.41)
limits = c(0,0.7)) +
theme_bw() +
theme(legend.position = c(0.9, 0.5))+
labs(x = "Hellinger Distance")
sigstats <- filter(KLdat, sdfrommean >= 1.96) %>%
dplyr::select(Prefecture = id, Year = YEAR, Distance = distance, `z-score` = sdfrommean) %>%
mutate(Year = paste0(substr(as.character(Year),2,5),", ",substr(as.character(Year),7,10)),
Year = if_else(Prefecture == "Evacuees", "2010, Evacuees", Year),
`p-val` = 2*pnorm(-abs(`z-score`))) %>%
arrange(-`z-score`) %>%
dplyr::select(Prefecture, `P, Q` = Year, `H(P, Q)` = Distance, `z-score`, `p-val`)
kable(sigstats, "latex", booktabs = T, caption = "\\textbf{Hellinger distances significant at $\\alpha$=0.05.} We only report positive, significant differences as here we are interested in the probability distributions that are most significantly different. Concerning permanent migration, only Miyagi Prefecture in 2011 and 2012 is significantly different. Evacuees exhibit a probability distribution very different from the pre-existing migration system.\\label{KLtable}") %>%
kable_styling(position = "center")
rq1 <- filter(KLdat, id %in% c("Fukushima", "Iwate", "Miyagi"),
YEAR %in% c("X2010X2011")) %>%
dplyr::select(Prefecture = id, Year = YEAR, Distance = distance, `z-score` = sdfrommean) %>%
mutate(Year = paste0(substr(as.character(Year),2,5),", ",substr(as.character(Year),7,10)),
Year = if_else(Prefecture == "Evacuees", "2010, Evacuees", Year),
`p-val` = 2*pnorm(-abs(`z-score`))) %>%
arrange(-`z-score`) %>%
dplyr::select(Prefecture, `P, Q` = Year, `H(P, Q)` = Distance, `z-score`, `p-val`)
kable(rq1, "latex", booktabs = T, caption = "\\textbf{Hellinger distances and significance for Fukushima, Iwate, and Miyagi out-migrations between 2010 and 2011.} \\label{DistPref}") %>%
kable_styling(position = "center")
kable(b, "latex", booktabs = T, caption = "\\textbf{Hellinger distances for Fukushima, Iwate, and Miyagi prefectures for the peri- and post-disaster migration systems.} We show the similarity between the pre-existing migration system and the peri- and post-disaster migration systems. All of these distances are relatively small, with only Miyagi (2010, 2011) demonstrating a significant difference. These results suggest permanent migrants in the most impacted prefectures continued to leverage the pre-existing migration system during and after the disaster. \\label{tab:PeriPost}") %>%
kable_styling(position = "center") %>%
collapse_rows(columns = 1, latex_hline = "major")
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
